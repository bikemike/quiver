dnl Process this file with autoconf to produce a configure script.
dnl Created by Anjuta application wizard.

AC_INIT([quiver], [0.2.0], [http://mike.yi.org/quiver])
AC_CONFIG_SRCDIR([src/Quiver.cpp])

AC_CONFIG_MACRO_DIR([m4])

AM_INIT_AUTOMAKE([subdir-objects]) 

AC_LANG_PUSH([C++])
AC_CHECK_HEADER([ext/hash_map],[AC_DEFINE([HAVE_EXT],[],["have ext"])],[]) 
AC_CHECK_HEADER([tr1/unordered_map],[AC_DEFINE([HAVE_TR1],[],["have tr1"])],[]) 
AC_CHECK_HEADER([unordered_map],[AC_DEFINE([HAVE_CXX0X],[],["have cxx0x"])],[]) 
AC_LANG_POP([C++])

AM_CONFIG_HEADER([config.h])
AC_PROG_LIBTOOL
dnl AM_MAINTAINER_MODE

AM_PROG_CC_C_O

AC_ISC_POSIX
dnl AC_PROG_CC
AC_HEADER_STDC

AC_CHECK_FUNCS([gettimeofday])
AC_CHECK_HEADERS([sys/time.h])

AC_CHECK_HEADER([jpeglib.h],, [AC_MSG_ERROR([Could not find jpeglib.h])])
AC_CHECK_HEADER([pthread.h],, [AC_MSG_ERROR([Could not find pthread.h])])


AC_C_CONST
AC_HEADER_STDBOOL
AC_HEADER_TIME


AC_PROG_CPP
AC_PROG_CXX

AC_PATH_PROG([GLIB_GENMARSHAL], [glib-genmarshal])

AC_PATH_PROG([GDK_PIXBUF_CSOURCE], [gdk-pixbuf-csource])

dnl Set gettext package name
GETTEXT_PACKAGE=quiver
AC_SUBST([GETTEXT_PACKAGE])
AC_DEFINE_UNQUOTED([GETTEXT_PACKAGE],["$GETTEXT_PACKAGE"], [GETTEXT package name])

dnl Add the languages which your application supports here.
ALL_LINGUAS="fr"
AM_GLIB_GNU_GETTEXT

AC_PROG_INTLTOOL([0.21])

QUIVER_MODULES="gtk+-3.0 gio-2.0"

PKG_CHECK_MODULES([LIBEXIF], [libexif],[have_libexif=yes],[have_libexif=no])

PKG_CHECK_MODULES([GSTREAMER], [gstreamer-1.0 gstreamer-plugins-base-1.0 gstreamer-video-1.0 gstreamer-app-1.0])


AC_ARG_WITH(
	[build_config], 
	[AS_HELP_STRING(
		[--with-build-config=CFG],
		[where CFG is one of the following alternate build configurations: maemo])
	],
	[build_config=$withval],
	[])

AM_CONDITIONAL(MAEMO, [test x$build_config = xmaemo]) 
if test x$build_config = xmaemo; then
	third_party_dir=`pwd`/${srcdir}/3rdparty
# Hildon-libs -> libhildon1 (pkg-config name hildon-1)
	PKG_CHECK_MODULES([HILDON_1], [hildon-1],
		[ AC_DEFINE([HAVE_HILDON_1],[1],[hildon-1 is available]) ],
		[have_hildon1=no]
		[ PKG_CHECK_MODULES([HILDON_LIBS], [hildon-libs],
			[ AC_DEFINE([HAVE_HILDON_LIBS],[1],[hildon-libs is available]) ],
			[have_holdon_libs=no])])

# Hildon-fm -> libhildonfm2 (pkg-config name hildon-fm-2)
	PKG_CHECK_MODULES([HILDON_FM_2], [hildon-fm-2],
		[ AC_DEFINE([HAVE_HILDON_FM_2],[1],[hildonfm2 is available]) ],
		[have_hildon_fm_2=no]
		[PKG_CHECK_MODULES([HILDON_FM], [hildon-fm],
			[ AC_DEFINE([HAVE_HILDON_FM],[1],[hildon-fm is available]) ],
			[have_hildon_fm=no])])

# Libossomime0 -> libhildonmime0
	PKG_CHECK_MODULES([HILDON_MIME], [libhildonmime],
		[ AC_DEFINE([HAVE_HILDON_MIME],[1],[libhildonmime is available]) ],
		[have_hildon_mime=no]
		[PKG_CHECK_MODULES([OSSO_MIME], [libossomime],
			[ AC_DEFINE([HAVE_OSSO_MIME],[1],[libossomime is available]) ],
			[have_osso_mime=no])])

	if test x$build_cpu = xarm; then
		AC_DEFINE(QUIVER_MAEMO,1,[quiver for maemo build configuration])
		ac_boost_path=${third_party_dir}/boost
		boost_signals_static=yes
		LIBEXIF_CFLAGS=-I${third_party_dir}/libexif/include
		LIBEXIF_LIBS=${third_party_dir}/libexif/lib/armel/libexif.a
		BOOST_SIGNALS_LIB=${third_party_dir}/boost/lib/armel/mt/release/libboost_signals-gcc-mt-1_33_1.a 
	else
		AC_DEFINE(QUIVER_MAEMO,1,[quiver for maemo build configuration])
		BOOST_SIGNALS_LIB=${third_party_dir}/boost/lib/x86/mt/release/libboost_signals-gcc-mt-1_33_1.a 
		ac_boost_path=${third_party_dir}/boost
		boost_signals_static=yes
		LIBEXIF_CFLAGS=-I${third_party_dir}/libexif/include
		LIBEXIF_LIBS=${third_party_dir}/libexif/lib/x86/libexif.a
	fi
else
	QUIVER_MODULES="$QUIVER_MODULES"
fi

AC_SUBST([PACKAGE_CFLAGS])

PKG_CHECK_MODULES([PACKAGE], [$QUIVER_MODULES])

AX_BOOST_BASE([1.33.1])
if test x$boost_signals_static = x; then
AX_BOOST_SIGNALS
fi


AC_SUBST([PACKAGE_CFLAGS])
AC_SUBST([PACKAGE_LIBS])

AC_SUBST([LIBEXIF_CFLAGS])
AC_SUBST([LIBEXIF_LIBS])

AC_SUBST([GSTREAMER_CFLAGS])
AC_SUBST([GSTREAMER_LIBS])

AC_ARG_WITH(
	[data-dir], 
	[AS_HELP_STRING(
		[--with-data-dir=DATA_DIR],
		[where DATA_DIR is the directory that quiver.ui lives])
	],
	[quiver_datadir=$withval],
	[quiver_datadir=${datadir}/quiver/data])

AC_SUBST([quiver_datadir])

AC_OUTPUT([
Makefile
po/Makefile.in
libquiver/Makefile
src/Makefile
src/icons/Makefile
data/Makefile
])
